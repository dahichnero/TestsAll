
ОСНОВНЫЕ ТРЕБОВАНИЯ К СТИЛЮ ПРОГРАММИРОВАНИЯ

1	Программа структурирована (отдельные процедуры для отдельных законченных функций).
2	Текст программы одной процедуры занимает примерно 60 строк (входит на экран).
3	Используются осмысленные и недлинные имена переменных.
4	Отсутствие сходных имен переменных.
5	Цифры ставятся в конце идентификатора.
6	Ключевые слова в качестве идентификаторов не используются.
7	Нет лишних промежуточных переменных.
8	В одной строке расположен один оператор (в пределах разумного).
9	В теле цикла не изменяется параметр цикла.
10	Активно используются возможности языка, библиотеки и встроенные функции.
11	Текст программы структурирован (есть отступы).
12	Есть комментарии в тексте программы.
13	Все переменные объявлены явно.
14	Нет операций со значениями смешанных типов.
15	Не используется оператор безусловного перехода.

 

ОСНОВНЫЕ ТРЕБОВАНИЯ К ПОЛЬЗОВАТЕЛЬСКОМУ ИНТЕРФЕЙСУ И ЗАЩИТЕ ДАННЫХ

1	Интерфейс интуитивно понятный, приближен к стандарту самых распространённых программ.
2	Есть система помощи.
3	Сообщения сформулированы коротко, четко и содержат ответ на вопрос «Что делать?».
4	Дизайн простой и лаконичный.
5	Нет избыточного количества ярких цветов.
6	Фон не мешает восприятию основной информации, имеет спокойный цвет.
7	Стиль оформления везде одинаковый.
8	Текст хорошо читается.
9	Элементы управления расположены удобно, логично, имеют подходящий размер и правильно используются.
10	Ввод данных организован удобно.
11	При любых некорректных значениях входных данных программа продолжает адекватно работать.


ЛАБОРАТОРНАЯ РАБОТА № 5


Предмет: Технология разработки программных продуктов.
Тема: стратегия тестирования «черный ящик».

Критерии оценки:
«5» – задание выполнено полностью, в установленный срок, выделены все классы эквивалентности, разработаны все необходимые тесты;
«4» – задание выполнено в установленный срок, выделены все классы эквивалентности, разработано большинство необходимых тестов;
«3» – выделены все классы эквивалентности, разработано минимальное количество необходимых тестов, работа сдана позже установленного срока;
«2» – не выделены все классы эквивалентности, нет минимального набора тестов.

Для программы контрольной работы разработать тесты с помощью стратегии «черного ящика».

МЕТОДИЧЕСКИЕ УКАЗАНИЯ

Стратегия «черного ящика» 

Стратегия  тестирования, при которой целью является проверить, соответствует ли программа спецификациям, называется стратегией «черного ящика». Ее называют также управлением по данным, т. к. тесты составляются в соответствии с описаниями входных и выходных данных, без учета знаний о структуре программы. Программа, таким образом, рассматривается как черный ящик. При таком подходе критерием исчерпывающего тестирования является использование в качестве тестовых наборов всех возможных наборов входных данных, что в реальной ситуации невозможно. Во-первых, нельзя создать тест, гарантирующий отсутствие ошибок, во-вторых, разработка таких тестов противоречит экономическим требованиям. Отсюда вытекает необходимость определить методология  построения оптимального набора тестов.
Основными методами проектирования тестов для стратегии «черного ящика» являются:
1)	эквивалентное разбиение;
2)	анализ граничных значений;
3)	предположение об ошибке.
Использование этих методов позволяет составить набор тестов, которые выявляют максимальное число ошибок в программе.

Эквивалентное разбиение
 
Правильно составленный тест должен обладать двумя свойствами:
1)	уменьшать более чем на единицу число других тестов, которые должны быть разработаны для достижения цели тестирования;
2)	покрывать часть других возможных тестов, что дает возможность определить наличие или отсутствие ошибок при использовании этого множества значений данных.

Для того чтобы минимизировать необходимое число тестов, входные данные разбиваются на конечное число классов эквивалентности. Каждый тест, относящийся к некоторому классу, должен быть эквивалентен любому другому тесту этого класса. Это означает, что если один тест обнаруживает ошибку, то и все другие тесты будут обнаруживать ту же ошибку. Напротив, если тест не обнаруживает ошибку, то и другие тесты ее не обнаруживают.
Разработка тестов методом эквивалентного разбиения выполняется в два этапа:
1)	выделение классов эквивалентности;
2)	построение тестов.

Выделение классов эквивалентности

Сначала выделяются все входные условия, затем каждое из них разбивается на две или более групп. Для всех входных данных определяются правильные и ошибочные значения. Соответственно строятся правильные и неправильные классы эквивалентности. При этом существует ряд правил:
1)	если входное условие описывает область значений (например, «данное целое, принимает значения от 1 до 99»), то определяется один правильный класс (1≤ значение целого данного ≤99) и два неправильных (значение целого данного >99 и значение целого данного <1);
2)	если входное условие описывает число значений (например, «в группе должно быть от 1 до 30 человек»), то определяется один правильный класс (от 1 до 30 человек) и два неправильных (ни одного и более 30 человек);
3)	если входное условие описывает множество значений и каждое значение используется особо (например, пункты меню от 1 до 5), то определяется правильный класс для каждого значения и один неправильный (не выбран ни один пункт);
4)	если входное условие описывает ситуацию должно быть (например, «значение должно быть целым» или «строка должна содержать только буквы русского алфавита»), то определяется один правильный класс (значение - целое число или строка состоит только из букв русского алфавита) и один неправильный (значение - не целое число или строка содержит символ, отличный от букв русского алфавита);
5)	если есть основания считать, что различные элементы класса эквивалентности дают разные результаты, то данный класс разбивается на меньшие;
6)	каждому классу присваивается уникальный номер.

Анализ граничных значений

Тесты, разработанные методом эквивалентного разбиения, дополняются тестами, построенными с учетом исследования граничных значений. Это означает, во-первых, дополнительное построение тестов, в которых проверяется верхняя и нижняя граница каждого класса, во-вторых,  классы эквивалентности дополняются классами по выходным данным. При этом выполняются следующие правила (для входных и выходных данных):
1)	строятся тесты для границ области  и тесты для данных, выходящих за границы области на минимальное  значение;
2)	для дискретных значений строятся тесты для минимального и максимального значения  и тесты для данных, меньших минимального и больших максимального значения;
3)	если данные – упорядоченное множество (линейный массив, таблица, файл), то следует проверить 
а) пустое множество;
б) множество с минимальным количеством данных;
в) множество с максимальным количеством данных;
г) первый и последний элемент этого множества.
4)	выделяются граничные условия с учетом особенностей конкретной задачи и строятся для них тесты.

При построении тестов следует иметь в виду, что, прежде всего, необходимо проверить выполнение всех функций программы при правильных данных, только затем проверять ее работу при неверных или недопустимых входных данных. Каждый тест должен включать все входные данные и ожидаемый результат (выходные данные или реакцию программы).

Для построения классов можно использовать следующую таблицу:
№	Входные данные	Условия	Правильные классы	Неправильные классы
				

Для каждого из входных данных записываются условия, при которых оно считается верным, и в соответствии с ними определяются правильные классы эквивалентности. Затем, исходя из этих условий, определяется, какие значения будут недопустимыми, и по ним строятся неправильные классы.
Необходимая информация берется из технического задания.

Массивы

При построении тестов для задач с массивами необходимо проверять следующие граничные условия:
1)	массив не содержит ни одного элемента;
2)	массив содержит минимальное количество элементов;
3)	массив содержит максимальное количество элементов;
4)	хотя бы один из элементов массива имеет минимальное значение;
5)	хотя бы один из элементов массива имеет максимальное значение.
Для задач, связанных с сортировкой, необходимо проверять случаи, когда массив упорядочен по не возрастанию, по не убыванию, не упорядочен. Для задач поиска элементов проверяются граничные условия по выходным данным: искомый элемент - первый в массиве, последний, отсутствует, все элементы удовлетворяют условию. 

Работа с файлами

При тестировании задач, связанных с чтением данных из файла или записи в файл проверяются следующие условия: правильность имени файла, наличие файла на диске, корректность выполнения функции чтения или записи, для входного файла - отсутствие в нем данных, для выходного - запись в файл с максимальным количеством записей (если длина файла ограничена). Проверяется работа с первой и последней записью файла. Обязательно должны тестироваться ситуации, когда файл может оказаться привязанным к определенному диску или каталогу. Как правило, в таких программах работает функция поиска, она также должна быть протестирована. Если для данных файла выполняется сортировка или отбор по заданным критериям, то проверяются те же условия, что и для массива.

Пример.
Пусть в техническом задании описаны следующие входные данные:
1)	n – количество строк матрицы, integer, от 1 до 15;
2)	st – фамилия, string, до 50 символов;
3)	f – текстовый файл, содержащий только буквы русского алфавита;
4)	d – дата в формате дд.мм.гггг.

 

Составляем таблицу классов эквивалентности.
Таблица 1 – Классы эквивалентности
№	Входные данные	Условия	Правильные классы	Неправильные классы
1.	n – количество строк матрицы	1 n 15	n – число (1)
n – натуральное число (2)
1< n <15 (3)
n=1 (4)
n=15 (5)	n – не число (6)
n – не натуральное число (7)
n < 1 (8)
n >15 (9)

2.	st – фамилия	длина st до 50 символов	st – строка (10)
0<длина st<50 (11)
длина st=50 (12)	st – пусто (13)
длина st>50 (14)
3.	f – текстовый файл	f содержит только буквы русского алфавита	f существует (15)
f не пуст (16)
f содержит только буквы русского алфавита (17)	f не существует (18)
f пуст (19)
f содержит символы, не являющиеся буквами русского алфавита (20)
4.	d – дата 	формат дд.мм.гггг	d – дата (21)
формат d
дд.мм.гггг (22)	d – не дата (23)
формат d
не дд.мм.гггг (24)


Построение тестов

По выделенным классам эквивалентности строятся тесты. Этот процесс включает в себя:
1)	проектирование новых тестов, каждый из которых покрывает как можно большее число непокрытых правильных классов эквивалентности, до тех пор, пока все правильные классы не будут покрыты тестами;
2)	запись тестов, каждый из которых покрывает один и только один из непокрытых неправильных классов эквивалентности, до тех пор, пока все неправильные классы не будут покрыты тестами.
1)	выделение классов эквивалентности;
2)	построение тестов.

Причина покрытия неправильных классов индивидуальными тестами состоит в том, что определенные проверки с ошибочными данными скрывают или заменяют проверки с другими ошибочными данными.
Необходимая информация берется из технического задания.
 

Для построения тестов используется таблица:
№ теста	Значения входных данных	Ожидаемый результат	Правильные классы	Неправильные классы
				


Пример.
Составим таблицу тестов для составленных выше классов эквивалентности.
Таблица 2 – Набор тестов.
№ теста	Значения входных данных	Ожидаемый результат	Правильные классы	Неправильные классы
1.		n=1	Необходимая информация берется из технического задания	1, 2, 4	
2.		n = 15		1, 2, 5	
3.		n = 10		1, 2, 3	
4.		n = 3,33			7
5.		n = валдповд			6
6.		n = –10			8
7.		n = 110			9
8.		st = «Иванов А.Т.»		10, 11	
9.		st = «Сложно придумать такую фамилию, но надо проверить.»		10, 12	
10.		st = «»			13
11.		st = «Сложно придумать такую фамилию, но надо проверить.123»			14
12.		f = «Просто текст из русских букв»		15, 16, 17	
13.		f = «»			19
14.		f не существует			18
15.		f = «Просто текст из русских букв и еще 12345»			20
16.		d = 15.01.2021		21, 22	
17.		d = 15.01.21			24
18.		d = 123435			23

Каждый тест содержит значения всех входных данных. Для каждого из входных данных записываются конкретные значения, при которых оно входит в один из классов эквивалентности (правильный или неправильный). В соответствии с ними определяются ожидаемые результаты работы программы (вывод значений, сообщения, завершение работы и т. д.). Один тест может покрывать несколько правильных классов по разным входным данным. Но для каждого неправильного класса строится отдельный тест. Это означает, что в тестовом наборе входных данных может быть только одно неверное или недопустимое значение.
Цель тестирования – показать, что в результате исполнения теста результат работы программы отличается от ожидаемого. Если тест обнаружил ошибку в программе, то тестовый прогон считается успешным. Если ошибка не обнаружена, то вполне вероятно, что тест был составлен неудачно, следует рассмотреть возможность проектирования нового теста и проверить еще раз работу программы.



 Министерство общего и профессионального образования Свердловской области
Государственное автономное профессиональное образовательное учреждение Свердловской области «Уральский политехнический колледж – Межрегиональный центр компетенций»
(ГАПОУ СО « Уральский политехнический колледж - МЦК»)









Методические указания по организации и проведению курсового проекта студента
профессионального модуля
ПМ.03 Участие в интеграции программных модулей




для специальности
09.02.03 Программирование в компьютерных системах










Екатеринбург
2017

Методические указания по
организации и проведению
курсового проекта
студента по профессиональному модулю
ПМ.03 Участие в интеграции
программных модулей рассмотрены
и одобрены предметно-цикловой
комиссией программирования 

Председатель предметно-цикловой
комиссии

________________ О.В.Быстрых

Протокол № _____ 

от «___»_____________20____ г.	
Методические указания по организации и проведению курсового проекта студента по профессиональному модулю разработаны на основе рабочей программы профессионального модуля ПМ.03 Участие в интеграции программных модулей для специальности 09.02.03 Программирование в компьютерных системах


УТВЕРЖДАЮ
Заместитель директора по УР
 ГАПОУ СО «Уральский политехнический колледж - МЦК»

________________ И.Н.Федорова

«____» ____________ 201__ г.


Разработчик: Быстрых О.В., преподаватель специальных дисциплин ГАПОУ СО «Уральский политехнический колледж - МЦК»

Техническая экспертиза методических указаний
по организации и проведению курсового проекта
студента по профессиональному модулю
ПМ.03 Участие в интеграции
программных модулей пройдена.
Эксперты: 
Заведующий научно-методической частью
ГАПОУ СО «Уральский политехнический колледж - МЦК»

____________________И.С. Чинёнова
 «___»_______________201___г.
 
СОДЕРЖАНИЕ

НАЗНАЧЕНИЕ И  ПОРЯДОК ВЫПОЛНЕНИЯ КУРСОВОГО ПРОЕКТА	4
СОСТАВ КУРСОВОГО ПРОЕКТА	6
ЭТАПЫ ВЫПОЛНЕНИЯ КУРСОВОГО ПРОЕКТА	8
ОФОРМЛЕНИЕ ПОЯСНИТЕЛЬНОЙ ЗАПИСКИ	9
СОСТАВ И ОФОРМЛЕНИЕ ПРЕЗЕНТАЦИЙ	11
ЛИТЕРАТУРА	12

 
НАЗНАЧЕНИЕ И  ПОРЯДОК ВЫПОЛНЕНИЯ КУРСОВОГО ПРОЕКТА

Целью курсового проекта является определение уровня общенаучной и специальной подготовки обучающегося по профессиональному модулю ПМ.03 Участие в интеграции программных модулей, его способность и умение применять на практике освоенные знания, практические умения, общие и профессиональные компетенции.
Работа над курсовым проектом включает:
1)	получение индивидуального задания; 
2)	исследование предметной области;
3)	определение типов и характера входных данных;
4)	составление и оформление технического задания на проект в соответствии с ГОСТ 19.201-78;
5)	разработку входных форм (при необходимости);
6)	разработку выходных форм;
7)	разработку и оформление математической модели;
8)	разработку проекта приложения в соответствии с полученным заданием;
9)	составление и оформление диаграмм IDF0, DFD, «сущность-связь»;
10)	составление и оформление схемы данных в соответствии с ГОСТ 19.701-90;
11)	составление и оформление структуры программы;
12)	составление и оформление инструкции пользователя;
13)	составление и оформление тестовых данных;
14)	оформление пояснительной записки.

Выполненный курсовой проект сдается преподавателю. Руководитель просматривает записку и при отсутствии принципиальных замечаний допускает студента к защи¬те проекта. Целью просмотра записки является ознакомление препода¬вателя с результатами проектирования, а не поиск и исправление оши¬бок, т.к. ответственность за качество работы несет только ее автор. При обнаружении принципиальных ошибок, незаконченном или небрежно оформленном проекте он возвращается на доработку. Возвраты на до¬работку или увеличение периода проектирования без уважительных причин снижают оценку при защите проекта. 
Курсовой проект  подлежит  защите, по  результатам которой выставляется дифференцированная оценка. Защита проекта сопровождается презентацией.
При защите проекта студент докладывает содержание работы, отвечает на вопросы.
В докладе в сжатой форме излагается:
1)	постановка задачи;
2)	краткий анализ состояния вопроса (наличие аналогов, обзор методов и средств, выбор средств);
3)	обоснование принятых решений;
4)	выводы, содержащие сведения по результатам работы.

Продолжительность доклада следует планировать на 5-7 минут.

При выставлении оценки учитывается полнота выполнения задания, уровень самостоятельности при выполнении проекта, качество презентации и пояснительной записки.
Оценка «отлично» ставится, если проект выполнен в полном объеме в установленный срок при небольшой помощи руководителя, пояснительная записка и презентация оформлена в соответствии с требованиями, доклад на защите четкий, содержит полную информацию о проекте, даны ответы на все вопросы преподавателя.
Оценка «хорошо» ставится, если проект выполнен в полном объеме в установленный срок при небольшой помощи руководителя, пояснительная записка и презентация оформлена в соответствии с требованиями, есть небольшие замечания по оформлению, доклад на защите четкий, содержит полную информацию о проекте, даны ответы на большинство вопросов преподавателя.
Оценка «удовлетворительно» ставится, если проект выполнен в полном объеме при значительной помощи руководителя, имеет место нарушение срока выполнения проекта, пояснительная записка и презентация оформлена в соответствии с требованиями, есть существенные замечания по оформлению, доклад на защите содержит достаточную информацию о проекте, даны ответы на основные вопросы преподавателя.
Оценка «неудовлетворительно» ставится, если проект не выполнен или отсутствуют пояснительная записка и презентация.

 
СОСТАВ КУРСОВОГО ПРОЕКТА

Курсовой проект состоит из аналитической и проектной части, выполняемой с применением компьютера.
Аналитическая часть курсового проекта выполняется студентом на основании его знаний объекте, являющимся предметом проектирования, с привлечением  имеющихся у него знаний о структуре, функционировании и документообороте организаций. 
Программная реализация проекта осуществляется с использованием языков программирования Delphi, Java, C++, C#/
Разработка диаграмм IDF0, DFD осуществляется с помощью программного средства Ramus Educational.
 Оформление документации осуществляется с помощью текстового редактора MS Word.
Оформление презентации осуществляется с помощью MS PowerPoint.

Расчетно-пояснительная записка состоит из следующих документов.
1.1	Постановка задачи.
1.2	Математическая модель.
1.3	Функциональная диаграмма IDEF0.
1.4	Диаграмма поток данных DFD.
1.5	Диаграмма «сущность-связь».
1.6	Схема данных.
1.7	Структура программы.
1.8	Описание алгоритмa.
1.9	Схема алгоритма.
1.10	Инструкция пользователя.
1.11	Замечания.
1.12	Список литературы.
2	Приложения
2.1	Приложение А. Текст программы.
2.2	Приложение Б. Результаты работы программы.

Математическая модель и диаграмма «сущность-связь» могут отсутствовать в зависимости от индивидуального задания.

Постановка задачи содержит:
1)	формулировку задания,
2)	входные и выходные данные.

Функциональная диаграмма IDEF0 содержит модель основного процесса. Она должна содержать, по крайней мере, один уровень декомпозиции.

Диаграмма потоков данных DFD должна содержать, по крайней мере, один уровень декомпозиции.

Диаграмма «сущность-связь» показывает структуру данных и взаимосвязи между ними. Она должна быть оформлена в нотации Баркера.


 
ЭТАПЫ ВЫПОЛНЕНИЯ КУРСОВОГО ПРОЕКТА

В курсовом   проекте предусматривается поэтапное выполнение работ. Последовательность этапов: 
1)	постановка задачи, математическая модель и оформление технического задания;
2)	разработка функциональной диаграммы, диаграммы потоков данных, диаграммы «сущность-связь»;
3)	разработка алгоритма и структуры программы;
4)	разработка и отладка программы;
5)	оформление документации;
6)	предоставление программы и документации на проверку.

Исходные данные и объем работ на каждом этапе определяются индивидуальным заданием.
 
ОФОРМЛЕНИЕ ПОЯСНИТЕЛЬНОЙ ЗАПИСКИ

Оформление пояснительной записки должно отвечать требовани¬ям правил оформления письменных работ в ГАПОУ СО Уральский политехнический колледж – МЦК.
Пояснительная записка оформляется на листах белой бумаги формата А4 (210 х 297 мм)  с рамкой. Лист заполняется с одной стороны и должен иметь поля: левое – 30 мм, правое, нижнее и верхнее – 20 мм.
Текст пояснительной записки оформляется в редакторе MS Word шрифтом Times New Roman 14 пт, с абзацным отступом 15 мм, выравниванием по ширине, межстрочный интервал – одинарный.
Заголовки и подзаголовки оформляются шрифтом Times New Roman 16 пт, жирным, с выравниванием по центру. В конце заголовков и подзаголовков знаки препинания не ставятся.
Выделение в тексте разрешается делать полужирным шрифтом или курсивом, причем должен быть выбран только один тип выделения для всей работы.
При переносе части абзаца на другую страницу не должна оставаться одна строка на предыдущей странице и не должна переносится одна строка на следующую страницу. Это же правило применяется и к заголовкам.
От заголовка до текста должна быть пропущена одна строка. От текста до следующего заголовка должна быть пропущена одна строка.
Текст должен быть структурирован, то есть разбит на разделы и подразделы. Каждый раздел должен начинаться с новой страницы.
Внутри одного раздела текст может быть дополнительно разбит на одноуровневые списки.
Если список представляет собой отдельные предложения, то они начинаются с заглавной буквы и заканчиваются точкой.
Пример.
1 Предложение списка.
2 Еще одно предложение списка.

Если список представляет собой единое предложение, то он начинается после двоеточия, каждый элемент начинается с маленькой буквы и заканчивается точкой с запятой. В конце ставится точка.
Пример:
1)	предложение списка;
2)	еще одно предложение списка.

Приложения обозначают заглавными буквами русского алфавита. Приложение должно иметь заголовок.
Страницы пояснительной записки должны быть пронумерованы арабскими цифрами по порядку от титульного листа до последнего, без пропусков и повторений. Номер ставится в соответствующем поле рамки. На первом листе номер не ставится. Приложения нумеруются отдельно.
Список литературы должен быть оформлен в соответствии с требованиями ГОСТ 7.1 – 2003.
Оформление схем данных и алгоритма должно отвечать требованиям ГОСТ 19.701-90.
При оформлении схем длина линии потока должна быть не менее 10 мм. Линия потока может быть увеличена, если имеется очень большой комментарий. Размеры всех блоков, кроме переключателя и терминатора, должны удовлетворять пропорции а:b = 2:1






Размер переключателя составляет 


Размер терминатора составляет


В пределах одной схемы блоки должны иметь одинаковый размер.
В случае стандартного направления линии потока стрелки не ставятся.

По¬яснительная записка, укомплектованная в соответствии с требованиями, брошюруется в обложку, подписыва¬ется автором и сдается руководителю на проверку.

 
СОСТАВ И ОФОРМЛЕНИЕ ПРЕЗЕНТАЦИЙ

Презентация должна начинаться с титульного слайда, который содержит название учебного заведения, название работы, название учебной дисциплины, фамилию автора проекта, группу, фамилию преподавателя.
На втором слайде должно быть представлено содержание презентации.
Следующие слайды содержат основную часть презентации.
В конце должен быть слайд, содержащий список литературы и интернет-источников.
Последний слайд содержит благодарность слушателям за внимание.
Презентация должна состоять из 9-12 слайдов.
Каждый слайд должен иметь заголовок, информирующий о его содержимом.
Все заголовки должны быть выполнены в едином стиле, короткие, знаки препинания в конце заголовка не ставятся.
В каждом слайде необходимо максимально использовать все пространство, следует помнить, что нижняя часть слайда может быть плохо видна в конце аудитории.
Необходимо использовать шрифт Times New Roman, для заголовков 24 – 36 пт, для текста 18 – 22 пт.
Для выделения можно использовать жирный шрифт и заглавные буквы. Не рекомендуется использовать курсив, так как прописные буквы труднее читаются на экране. Нельзя использовать подчеркивание, так как оно обозначает гиперссылку.
Дизайн должен быть простым и лаконичным. Не надо увлекаться яркими цветами и пестрым фоном. Фон не должен мешать восприятию основной информации.
Стиль оформления должен быть одинаковый для всех слайдов.
Основной текст рекомендуется набирать нейтральным цветом – черным, белым или серым в зависимости от яркости фона.
Следует использовать минимум текста. Слайд не должен содержать исключительно текстовую информацию.
Не надо пытаться весь доклад поместить в презентацию. Презентация лишь иллюстрирует речь.
Предложения текста должны быть короткими.
Слайды должны содержать схемы, фотографии, картинки, диаграммы.
Не рекомендуется использовать эффекты анимации.



 

ЛИТЕРАТУРА

Основные источники

1.	Рудаков А.В., Федорова Г.Н. Технология разработки программных продуктов. Практикум.  – М., издательский центр «Академия», 2014. – 192 с.
2.	Липаев В.В. Программная инженерия сложных заказных комплексов. – М.: МАКС Пресс, 2014.  – 312 с.
3.	Назаров С.В. Архитектуры и проектирование программных систем. — М.: ИНФРА-М, 2013. – 413 с.
4.	Иванова Г.С. Технология программирования: учебник для вузов. – М., издательство МГТУ, 2012.
5.	Орлов С. А.,. Цилькер Б. Я. Технологии разработки программного обеспечения. –  СПб.: Питер, 2012.

Интернет-ресурсы

1.	http://vba-help.ru
2.	http://www.delphi-manual.ru
3.	http://www.it-gost.ru




Дополнительные источники

1.	Гарнаев А.Ю. Самоучитель VBA. – СПб.: БХВ-Санкт-Петербург, 2002, 512 с.
2.	Зиборов В.В. Visual Basic 2010 на примерах. – СПб.:  БХВ-Санкт-Петербург, 2010.
3.	Фаронов В. В. Delphi. Программирование на языке высокого уровня. Учебник для вузов. – СПб.: Питер, 2011.
4.	Архангельский А. Я. Программирование в Delphi. Учебник по классическим версиям Delphi. – М.: Бином-Пресс, 2010.
5.	Иванова Г. С. Технология программирования.– М.: КНОРУС, 2011.
6.	Уокенбах Дж. Excel 2010. Профессиональное программирование на VBA – Вильямс 2011.
7.	ГОСТ 19.001 – 77. Единая система программной документации. Общие положения.
8.	ГОСТ 19.201 – 78. Единая система программной документации. Техническое задание. Требования к содержанию и оформлению.
9.	ГОСТ 19.401 – 78. Единая система программной документации. Текст программы. Требования к содержанию и оформлению.
10.	ГОСТ 19.402 – 78. Единая система программной документации. Описание программы.
11.	ГОСТ 19.404 – 79. Единая система программной документации. Пояснительная записка. Требования к содержанию и оформлению.
12.	ГОСТ 19.701 – 90. Единая система программной документации. Схемы алгоритмов, программ, данных и систем. Условные обозначения и правила выполнения.
13.	ГОСТ Р ИСО/МЭК 12119-2000. Информационная технология. Пакеты программ. Требования к качеству и тестирование.





